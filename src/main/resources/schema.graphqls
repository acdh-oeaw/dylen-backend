type Query {
    allAvailableCorpora: [Corpus]
    getNetwork(target_word: String, year: Int): EgoNetwork
    allAvailableTargetWords: [TargetWord]
}

type TargetWord {
    id: ID
    text: String
    pos: String
    networks: [EgoNetwork]
}

type Corpus {
    id: ID
    name: String
    sources: [Source]
}

type Source {
    name: String
    targetWords: [TargetWord]
}

type EgoNetwork {
    id: ID
    text: String
    year: Int
    corpus: ID
    source: ID
    absFreq: Int
    relFreq: Float
    threshold: Float
    nodes:[Node]
    connections:[Connection]
}

type Node {
    id: ID
    clusterId: Int
    text: String
    pos: String
    similarity: Float
    metrics: NodeMetric
}

type NodeMetric {
    degreeCentrality: Float
    closenessCentrality: Float
    betweennessCentrality: Float
    eigenvectorCentrality: Float
}

type Connection {
    id: ID
    node1: ID
    node2: ID
    similarity: Float
}