name: Build and deploy 
on:
  push: {}
  repository_dispatch:
    types: [run]
jobs:
  setup_workflow_env:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.get_environment_from_git_ref.outputs.environment }}
      DOCKER_TAG: ${{ secrets.DOCKER_TAG || vars.DOCKER_TAG }}
      APP_NAME: dylen-backend
      APP_ROOT: "/"
    steps:
      - name: Get environment from git ref
        id: get_environment_from_git_ref
        run: |
          echo "Running on branch ${{ github.ref_name }}"
          if [ "${{ github.ref }}" = "refs/heads/prod" ]; then
            echo "environment=prod"
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=review/${{ github.ref_name }}"
            echo "environment=review/${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi  
  build:
    needs: [setup_workflow_env]
    name: Build Docker image from the branch ${{ github.ref_name }}
    runs-on: ubuntu-20.04
    environment: ${{ needs.setup_workflow_env.outputs.environment }}
    steps:
      - name: Checkout project sources
        uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11
      - uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 6.4.1
      - run: ./gradlew build -x test --scan
      - name: Upload build libs
        uses: actions/upload-artifact@v3
        with:
          name: build-libs
          path: build/libs/*.jar
          retention-days: 7
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create tags based on git data
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ needs.setup_workflow_env.outputs.DOCKER_TAG }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{sha}}
      - name: Set build environment
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
          VARS_CONTEXT: ${{ toJson(vars) }} 
        run: |
          echo -n "$SECRETS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("K8S_SECRET_"))]|map("\(.key|sub("K8S_SECRET_"; ""))=\(.value|tostring|@sh)")|.[]' > secrets.env
          echo -n "$VARS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("K8S_SECRET_"))]|map("  \(.key|sub("K8S_SECRET_"; "")): \(.value|tostring|@base64)")|.[]' >> secrets.env
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          push: true
          secret-files: |
            "secrets_env=./secrets.env"
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  _3:
    needs: [setup_workflow_env, build]
    uses: acdh-oeaw/gl-autodevops-minimal-port/.github/workflows/deploy-cluster-2.yml@main
    secrets: inherit
    with:
      environment: ${{ needs.setup_workflow_env.outputs.environment }}
      DOCKER_TAG: ${{ needs.setup_workflow_env.outputs.DOCKER_TAG }}
      APP_NAME: ${{ needs.setup_workflow_env.outputs.APP_NAME }}
      APP_ROOT: ${{ needs.setup_workflow_env.outputs.APP_ROOT }}